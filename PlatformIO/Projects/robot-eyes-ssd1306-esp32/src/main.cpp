// génération des images en binaire : https://javl.github.io/image2cpp/?pseSrc=pgEcranOledArduino
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>

// test d'un écran OLED 128x64 I2C
// Objectif : synchroniser l'affichage des yeux sur 2 écrans OLED 

const unsigned char eye1b [] PROGMEM = {
  // 'oeil1-b, 85x48px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
  0x0e, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xf3, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x80, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x4d, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x1e, 0x3f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x5f, 0xff, 0xff, 0xfe, 0x0f, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 
  0x07, 0x87, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x07, 0x83, 0xfc, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0x7f, 0xff, 0xfe, 0x07, 0x81, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xf6, 0xff, 0xff, 
  0xfa, 0x07, 0xc1, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xc0, 0xff, 0xff, 0xf9, 0x8f, 0xc0, 0xff, 0x00, 
  0x00, 0x00, 0x07, 0x81, 0xff, 0xff, 0xf4, 0xff, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0x01, 0xff, 
  0xff, 0xef, 0xff, 0xe0, 0xfe, 0x00, 0x00, 0x00, 0x0e, 0x01, 0xf7, 0xff, 0xdf, 0xef, 0xe0, 0xfc, 
  0x00, 0x00, 0x00, 0x1c, 0x07, 0xc3, 0xff, 0xbf, 0xdf, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x38, 0x03, 
  0xc3, 0xff, 0xff, 0xbf, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x38, 0x03, 0xc1, 0xff, 0xff, 0x7f, 0xe1, 
  0xf0, 0x00, 0x00, 0x00, 0x10, 0x07, 0xfb, 0xef, 0xff, 0xbd, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf7, 0xe7, 0xff, 0x79, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x20, 0x03, 0xe7, 0xc3, 0xc2, 0x01, 
  0xe1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xef, 0x21, 0x82, 0x01, 0xe3, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xde, 0x70, 0x06, 0x01, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x38, 0x0c, 
  0x01, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x1f, 0xf8, 0x03, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x0f, 0xe0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x3a, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
  
const unsigned char eye2b [] PROGMEM = {
  // 'oeil2-b, 81x47px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xff, 0x98, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xee, 0x07, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x07, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 
  0xfc, 0x07, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x06, 0xff, 0xff, 0xff, 0xfe, 0x07, 0x03, 0xf8, 0x00, 
  0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x83, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xff, 
  0xff, 0x7f, 0xff, 0x83, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0x07, 0x8f, 0xff, 0xff, 0xbf, 0x83, 0xf0, 
  0x00, 0x00, 0x00, 0x78, 0x07, 0x0f, 0xff, 0xfe, 0xff, 0x83, 0xe0, 0x00, 0x00, 0x00, 0xf0, 0x07, 
  0x0f, 0xff, 0xff, 0xff, 0x83, 0xc0, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xeb, 0xff, 0xff, 0xf7, 0x87, 
  0x80, 0x00, 0x00, 0x01, 0x80, 0x07, 0xff, 0x9f, 0x3d, 0xff, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xdf, 0x06, 0x04, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0x80, 0x0c, 0x07, 
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x08, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf8, 0xf0, 0x18, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf4, 0x7e, 0xf0, 
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xe8, 0x0e, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 
  0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x07, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
};

const unsigned char eye3b [] PROGMEM = { // PROGMEM  = stockage en mémoire flash (pour prendre moins de RAM)
  // 'oeil3-b, 81x47px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 
  0xc3, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x30, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 
  0xff, 0xff, 0xff, 0xf3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x83, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xff, 0xc7, 0x87, 0x80, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x07, 0x07, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0x86, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xcf, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x0f, 0xff, 0xff, 0xf0, 0x3f, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 0xff, 0xff, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xe0, 0x07, 0xd1, 0xff, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x1e, 0x00, 
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 
  0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xe0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char eye4b [] PROGMEM = {
  // 'oeil4-b, 87x47px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xe0, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x78, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_SSD1306 ecrana(128, 64, &Wire, -1); 
Adafruit_SSD1306 ecranb(128, 64, &Wire, -1); 

// Animation
const unsigned char* FRAMES[] = { eye1b, eye2b, eye3b, eye4b, eye3b, eye2b, eye1b }; // définir l'ordre des frames
// les paramètres de chaque frame, indexés pareil
const uint8_t  W[] = {85,83,81,87,81,83,85};   // largeur  de chaque frame
const uint8_t  H[] = {48,47,47,47,47,47,48};   // hauteur  de chaque frame
const int8_t   X[] = {21,22,23,20,23,22,21};   // position X de départ
const int8_t   Y[] = { 8, 8, 8,  8, 8, 8,  8}; // position Y de départ
const uint8_t N = sizeof(FRAMES)/sizeof(FRAMES[0]);

const uint16_t FRAME_MS = 60; // durée d’affichage d’une frame
const uint16_t HOLD_MS  = 1000; // pause en fin de cycle 


void setup() {
  // pin 21/22 (réservé pour I2C) en 400 kHz
  Wire.begin(22, 21, 400000);

  // initialisation des écrans, s'il sont détectés à la bonne adresse A=0x3D, B=0x3C
  bool okA = ecrana.begin(SSD1306_SWITCHCAPVCC, 0x3D);
  bool okB = ecranb.begin(SSD1306_SWITCHCAPVCC, 0x3C);

  // B = “normal”, A = miroir horizontal de B
  ecrana.ssd1306_command(0xA0); // miroir de l'écran B pour l'écran A, à changer quand nouveaux dessins

  // apparement un peu plus de contraste
  // TODO : à tester si utile
  if (okA) ecrana.ssd1306_command(SSD1306_SETCONTRAST), ecrana.ssd1306_command(0x8F);
  if (okB) ecranb.ssd1306_command(SSD1306_SETCONTRAST), ecranb.ssd1306_command(0x8F);
}

static inline void drawFrameBoth(uint8_t i) {
  // void = ne retourne rien
  // inline = suggère au compilateur de copier-coller le code à chaque appel,
  //          pour éviter le surcoût d'un appel de fonction (gain de temps)
  // static = la fonction est visible uniquement dans ce fichier (évite les conflits de noms)
  ecrana.clearDisplay();
  ecranb.clearDisplay();

  ecrana.drawBitmap(X[i], Y[i], FRAMES[i], W[i], H[i], SSD1306_WHITE);
  ecranb.drawBitmap(X[i], Y[i], FRAMES[i], W[i], H[i], SSD1306_WHITE);

  ecrana.display();
  ecranb.display();
}

void loop() {
  for (uint8_t i = 0; i < N; i++) {
    // on utilise millis() pour avoir un timing plus précis, delay() bloque tout
    uint32_t t0 = millis();
    drawFrameBoth(i);
    uint32_t dt = millis() - t0;
    if (dt < FRAME_MS) delay(FRAME_MS - dt);
  }
  delay(HOLD_MS);
}